{"version":3,"sources":["components/Formulario.jsx","components/Citas.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","htmlFor","type","placeholder","onChange","Citas","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.69b3c60b.chunk.js","sourcesContent":["import React, {Fragment, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid'; // libreria de codigos unicos\r\nimport PropTypes from 'prop-types' ;\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    //state de citas , el cual lo creamos localmente , es deicr, solo en este componente , ya que solo tiene quer con el formulario\r\n\r\n    const [cita, actualizarCita] = useState({\r\n        //del name del formulario, empiezan vacios debido q ue se llenaran con lo que ingrese el usuario\r\n        mascota: '', \r\n        propietario: '', \r\n        fecha: '', \r\n        hora: '', \r\n        sintomas: ''\r\n    });\r\n\r\n    //state de error en envio de formulario\r\n\r\n    const [error, actualizarError] = useState (false)\r\n\r\n    //funcion que se jecutara cuadno el usuario escribe\r\n\r\n    const actualizarState = e => { //este fue el nombre que le dimos a la funcion onChange de los input\r\n        \r\n        //e.target.name = revela el campo (name del input) en que estamos escribiendo\r\n        //e.target.value = rcxcevela el contenido del input\r\n\r\n        actualizarCita({\r\n            ...cita, //copa del array de cita para que no se reemplace al cambiar de input\r\n            [e.target.name] : e.target.value //con esta funcion reescribe el campo en que estamos escribiendo.\r\n        });\r\n        \r\n\r\n    };\r\n\r\n    //Extraer los valores para evitar tener que poner cita.mascota, cita.propietario, etc..\r\n\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita\r\n\r\n    //funcion enviar formulario\r\n\r\n    const submitCita = e =>{\r\n\r\n        // para prevenir el comportamiento por defecto del formulario\r\n        e.preventDefault(); \r\n\r\n\r\n        //validar\r\n\r\n        // -- 1. verificacion que no esten vaciso ninguno de los campos\r\n        \r\n        if (mascota.trim() === '' || propietario.trim() === ''  || fecha.trim() === ''  || hora.trim() === ''  || sintomas.trim() === '' ){ \r\n            actualizarError(true); //actualiza el state de error a true cundo no esten completos los campos\r\n            return; //en las validaciones siempre cuando hay un problema se coloca return para que no se continue ejecutando el codigo\r\n        }\r\n\r\n        //>Eliminar mensaje de Error si todo esta bien\r\n        actualizarError (false);\r\n\r\n        //asignar un ID\r\n        cita.id = uuidv4();\r\n\r\n        //crear la cita\r\n\r\n        crearCita(cita);\r\n\r\n\r\n        //reinicar el form\r\n\r\n        actualizarCita({\r\n            mascota: '', \r\n            propietario: '', \r\n            fecha: '', \r\n            hora: '', \r\n            sintomas: ''\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Crear cita</h2>\r\n            \r\n            { error ? <p className=\"alerta-error\"> Todos los campos son obligatorios</p> : null}\r\n\r\n\r\n            <form\r\n            \r\n            onSubmit={submitCita}\r\n            \r\n            >\r\n\r\n                <label htmlFor=\"mascota\">Nombre Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className =\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState} //funcion que recogera los cambios en el input\r\n                    value = {mascota} // para extraer el valor de propietario\r\n                />\r\n\r\n                <label htmlFor=\"propietario\">Nombre Dueño</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className =\"u-full-width\"\r\n                    placeholder=\"Dueño de mascota\"\r\n                    onChange={actualizarState} //funcion que recogera los cambios en el input\r\n                    value = {propietario} // para extraer el valor de propietario\r\n                />\r\n\r\n                <label htmlFor=\"fecha\">Fecha de cita</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className =\"u-full-width\"\r\n                    onChange={actualizarState} //funcion que recogera los cambios en el input\r\n                    value = {fecha} // para extraer el valor de propietario\r\n                />\r\n\r\n                <label htmlFor=\"hora\">Hora</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className =\"u-full-width\"\r\n                    onChange={actualizarState} //funcion que recogera los cambios en el input\r\n                    value = {hora} // para extraer el valor de propietario\r\n                />\r\n\r\n\r\n                <label htmlFor=\"sintomas\">Sintomas de mascota</label>\r\n                <textarea\r\n\r\n                name=\"sintomas\" \r\n                className =\"u-full-width maxwidth\"\r\n                placeholder=\"Por favor describa los sintomas que presenta su mascota\"\r\n                onChange={actualizarState} //funcion que recogera los cambios en el input\r\n                value = {sintomas} // para extraer el valor de propietario\r\n                 \r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                    onChange={actualizarState} //funcion que recogera los cambios en el input\r\n                >Enviar</button>\r\n\r\n            </form>\r\n\r\n\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react'\r\nimport PropTypes from 'prop-types' ;\r\n\r\nconst Citas = ({cita, eliminarCita}) => {\r\n\r\n    const {mascota, propietario, fecha, hora, sintomas, id} = cita\r\n\r\n    return ( \r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{mascota}</span></p>\r\n            <p>propietario: <span>{propietario}</span></p>\r\n            <p>Fecha:<span> {fecha}</span></p>\r\n            <p>Hora:<span> {hora}</span></p>\r\n            <p>Sintomas:<span> {sintomas}</span></p>\r\n\r\n            <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick= {()=>{\r\n                eliminarCita(id)\r\n            }}\r\n\r\n            >Eliminar &times;</button>\r\n\r\n        </div>\r\n     );\r\n}\r\n\r\nCitas.propTypes = {\r\n    cita: PropTypes.object,\r\n    eliminarCita: PropTypes.func\r\n\r\n}\r\n \r\nexport default Citas;","import React , {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Citas from './components/Citas';\n\n\n\nfunction App() {\n\n\n  //citas en Local Storage\n\n  let citasIniciales = JSON.parse (localStorage.getItem('citas'));\n\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  //arreglo de citas\n\n  const [citas, guardarCitas] = useState([]);\n\n  //useEffect \n\n  useEffect (()=>{\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify (citas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n   \n  }, [citas, citasIniciales]);\n\n  //funcion que toma las citas y agrega una nueva\n\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas, //copia de array de cita\n      cita // cita nueva\n    ])\n  };\n\n  //funcion que elimina cita por su iD\n\n  const eliminarCita = id =>{\n    const nuevasCitas = citas.filter(cita => cita.id !== id) \n\n    guardarCitas(nuevasCitas);\n  };\n\n  //mensaje condicional\n\n  const titulo = citas.length ===0 ? 'No hay citas' : 'Administra tus citas';\n\n  return (\n    \n    <Fragment>\n        <h1>Administrador de Pacientes</h1>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className =\"one-half column\">\n\n              <Formulario\n              crearCita= {crearCita}\n              />    \n                   \n            </div>\n\n            <div className =\"one-half column\">\n\n              <h2>{titulo}</h2>\n\n              {/* Listar el arreglo de citas */}\n              \n              {citas.map(cita=>(\n\n                <Citas\n                  key= {cita.id}\n                  cita={cita}\n                  eliminarCita={eliminarCita}\n                />\n\n              ))}\n\n\n            </div>\n\n\n          </div>\n\n        </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}